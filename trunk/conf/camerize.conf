#############################################################################################
# RTMP sections
#############################################################################################

listen              1935;
max_connections     1000;
daemon              off;
chunk_size          60000;
ff_log_dir          ./objs;
ff_log_level        info;
srs_log_tank        console;
srs_log_level       trace;
# srs_log_file        ./objs/srs.log;
utc_time            off;


# the main cycle will retrieve the system stat,
# for example, the cpu/mem/network/disk-io data,
# the http api, for instance, /api/v1/summaries will show these data.
# @remark the heartbeat depends on the network,
#       for example, the eth0 maybe the device which index is 0.

stats {
    # the index of device ip.
    # we may retrieve more than one network device.
    # default: 0
    network         0;
    # the device name to stat the disk iops.
    # ignore the device of /proc/diskstats if not configured.
    disk            sda sdb xvda xvdb;
}

#############################################################################################
# HTTP sections
#############################################################################################
# api of srs.

http_api {
    enabled         on;
    # the http api listen entry is <[ip:]port>
    # for example, 192.168.1.100:1985
    # where the ip is optional, default to 0.0.0.0, that is 1985 equals to 0.0.0.0:1985
    # default: 1985
    listen          1985;
    # whether enable crossdomain request.
    # default: on
    crossdomain     on;
    # the HTTP RAW API is more powerful api to change srs state and reload.
    raw_api {
        # whether enable the HTTP RAW API.
        # default: off
        enabled             off;
        # whether enable rpc reload.
        # default: off
        allow_reload        off;
        # whether enable rpc query.
        # default: off
        allow_query         off;
        # whether enable rpc update.
        # default: off
        allow_update        off;
    }
}

# embedded http server in srs.

http_server {
    # whether http streaming service is enabled.
    # default: off
    enabled         on;
    # the http streaming listen entry is <[ip:]port>
    # for example, 192.168.1.100:8080
    # where the ip is optional, default to 0.0.0.0, that is 8080 equals to 0.0.0.0:8080
    # @remark, if use lower port, for instance 80, user must start srs by root.
    # default: 8080
    listen          8080;
    # the default dir for http root.
    # default: ./objs/nginx/html
    dir             ./objs/nginx/html;
    # whether enable crossdomain request.
    # for both http static and stream server and apply on all vhosts.
    # default: on
    crossdomain     on;
}



#############################################################################################
# SRT server section
#############################################################################################
# @doc https://github.com/ossrs/srs/issues/1147#issuecomment-577607026
srt_server {
    # whether SRT server is enabled.
    # default: off
    enabled on;
    # The UDP listen port for SRT.
    listen 10080;
    # For detail parameters, please read wiki:
    #   https://github.com/ossrs/srs/wiki/v4_CN_SRTParams
    #   https://github.com/ossrs/srs/wiki/v4_EN_SRTParams
    maxbw 1000000000;
    connect_timeout 5000;
    peerlatency 100;
    recvlatency 100;
    # Default app for vmix, see https://github.com/ossrs/srs/pull/1615
    # default: live
    default_app live;
    srt_to_rtmp on;
}

#############################################################################################
# RTMP/HTTP VHOST sections
#############################################################################################
# vhost list, the __defaultVhost__ is the default vhost
# for example, user use ip to access the stream: rtmp://192.168.1.2/live/livestream.
# for which cannot identify the required vhost.
vhost __defaultVhost__ {

    # Low latency
    tcp_nodelay     on
    min_latency     on;

    play {
        gop_cache       off;
        queue_length    10;
        mw_latency      100;
    }

    publish {
        mr off;
    }

    # DVR RTMP stream to file,
    # start to record to file when encoder publish,
    # reap flv/mp4 according by specified dvr_plan.
    dvr {
        enabled         on;
        # the filter for dvr to apply to.
        #       all, dvr all streams of all apps.
        #       <app>/<stream>, apply to specified stream of app.
        # for example, to dvr the following two streams:
        #       live/stream1 live/stream2
        # default: all
        dvr_apply       all;
        # the dvr plan. canbe:
        #       session reap flv/mp4 when session end(unpublish).
        #       segment reap flv/mp4 when flv duration exceed the specified dvr_duration.
        # @remark The plan append is removed in SRS3+, for it's no use.
        # default: session
        dvr_plan        session;
        dvr_path        ./objs/nginx/recordings/[app]/[stream]/[stream]_[timestamp].flv;

        # the duration for dvr file, reap if exceed, in seconds.
        #       segment apply it.
        #       session,append ignore.
        # default: 30
        # dvr_duration    30;
        # whether wait keyframe to reap segment,
        # if off, reap segment when duration exceed the dvr_duration,
        # if on, reap segment when duration exceed and got keyframe.
        #       segment apply it.
        #       session,append ignore.
        # default: on
        dvr_wait_keyframe       on;
        # about the stream monotonically increasing:
        #   1. video timestamp is monotonically increasing,
        #   2. audio timestamp is monotonically increasing,
        #   3. video and audio timestamp is interleaved monotonically increasing.
        # it's specified by RTMP specification, @see 3. Byte Order, Alignment, and Time Format
        # however, some encoder cannot provides this feature, please set this to off to ignore time jitter.
        # the time jitter algorithm:
        #   1. full, to ensure stream start at zero, and ensure stream monotonically increasing.
        #   2. zero, only ensure stream start at zero, ignore timestamp jitter.
        #   3. off, disable the time jitter algorithm, like atc.
        # apply for all dvr plan.
        # default: full
        time_jitter             full;

    }

    # http_hooks {

    #     enabled         on;
    #     on_connect      http://127.0.0.1:5000/rtmp/v2/connect;
    #     on_close        http://127.0.0.1:5000/rtmp/v2/done;
    #     on_publish      http://127.0.0.1:5000/rtmp/v2/publish;
    #     on_unpublish    http://127.0.0.1:5000/rtmp/v2/publish_done;
    #     # on_srt          http://127.0.0.1:5000/rtmp/v2/srt;
    #     on_play         http://127.0.0.1:5000/rtmp/v2/play;
    #     on_stop         http://127.0.0.1:5000/rtmp/v2/play_done;
    #     on_dvr          http://127.0.0.1:5000/rtmp/v2/dvr;

    # }
}

